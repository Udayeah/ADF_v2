{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "dsazDB",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "dsdestcsv",
						"type": "DatasetReference"
					},
					"name": "sink1",
					"rejectedDataLinkedService": {
						"referenceName": "azblob",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "assert1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          SalesOrderID as integer,",
				"          SalesOrderDetailID as integer,",
				"          OrderQty as integer,",
				"          ProductID as integer,",
				"          UnitPrice as decimal(19,4),",
				"          UnitPriceDiscount as decimal(19,4),",
				"          LineTotal as decimal(38,6),",
				"          rowguid as string,",
				"          ModifiedDate as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table',",
				"     partitionBy('hash', 1)) ~> source1",
				"source1 assert(expectTrue(UnitPriceDiscount>0, false, 'Dis', null, toString(UnitPriceDiscount) + \"Must be greater than $0\"),",
				"     expectTrue(OrderQty<5, false, 'Qty')) ~> assert1",
				"assert1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['AssertChck.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     outputAssertFailedRows: true,",
				"     assertFailure_container: 'containerfortest',",
				"     assertFailure_folderPath: 'Archive/TextDocument',",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}